generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   // 'admin', 'employee', 'maintenance'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  maintenanceRequests MaintenanceRequest[]
  orders    Order[]

  @@map("users")
}

model MaintenanceRequest {
  id          String   @id @default(uuid())
  equipment   String
  description String
  priority    String
  status      String
  requestedBy String
  requestedAt DateTime
  department  String
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [requestedBy], references: [id])

  @@map("maintenance_requests")
}

// ðŸ’» PRODUTOS - CatÃ¡logo de produtos disponÃ­veis
model Product {
  id          String    @id @default(uuid())
  name        String
  category    String    // 'CPU', 'CPU_Servidor', 'Placa de VÃ­deo', etc.
  subcategory String?   // 'Gaming', 'Office', 'Server', etc.
  brand       String
  price       Float
  cost        Float     // Custo de aquisiÃ§Ã£o
  description String?
  specifications Json?   // EspecificaÃ§Ãµes tÃ©cnicas em JSON
  stock       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]

  @@map("products")
}

// ðŸ“‹ PEDIDOS - Vendas realizadas
model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  customerName String
  customerEmail String?
  customerPhone String?
  status      String      // 'pending', 'processing', 'testing', 'ready', 'delivered', 'cancelled'
  totalAmount Float
  totalCost   Float       // Custo total dos produtos
  profitAmount Float      // Lucro do pedido
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deliveredAt DateTime?
  user        User        @relation(fields: [createdBy], references: [id])
  items       OrderItem[]

  @@map("orders")
}

// ðŸ“¦ ITENS DO PEDIDO - Produtos vendidos em cada pedido
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float   // PreÃ§o de venda
  unitCost  Float   // Custo do produto
  subtotal  Float   // PreÃ§o total (quantity * unitPrice)
  profit    Float   // Lucro do item (subtotal - (quantity * unitCost))
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
} 