// üóÑÔ∏è CONFIGURA√á√ÉO DO BANCO DE DADOS
// Este arquivo define toda a estrutura do banco de dados do sistema MRP2
// Utiliza Prisma como ORM para facilitar opera√ß√µes e migra√ß√µes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// üë§ MODELO DE USU√ÅRIOS
// Gerencia todos os usu√°rios do sistema com diferentes n√≠veis de acesso
model User {
  id        String   @id @default(uuid()) // ID √∫nico gerado automaticamente
  email     String   @unique              // Email √∫nico para login
  password  String                        // Senha criptografada com bcrypt
  name      String                        // Nome completo do usu√°rio
  role      String                        // Papel: 'admin', 'employee', 'maintenance'
  createdAt DateTime @default(now())      // Data de cria√ß√£o do usu√°rio
  updatedAt DateTime @updatedAt           // Data da √∫ltima atualiza√ß√£o

  // üîó RELACIONAMENTOS
  // Solicita√ß√µes de manuten√ß√£o criadas pelo usu√°rio
  maintenanceRequests MaintenanceRequest[]
  
  // Solicita√ß√µes de manuten√ß√£o atribu√≠das ao usu√°rio (para t√©cnicos)
  assignedMaintenanceRequests MaintenanceRequest[] @relation("AssignedMaintenance")
  
  // Relat√≥rios de qualidade criados pelo usu√°rio
  qualityReports QualityReport[]
  
  // Pedidos criados pelo usu√°rio
  orders    Order[]

  @@map("users") // Nome da tabela no banco
}

// üîß MODELO DE SOLICITA√á√ïES DE MANUTEN√á√ÉO
// Gerencia todas as solicita√ß√µes de manuten√ß√£o de equipamentos
model MaintenanceRequest {
  id          String   @id @default(uuid()) // ID √∫nico da solicita√ß√£o
  equipment   String                        // Nome/tipo do equipamento
  description String                        // Descri√ß√£o detalhada do problema
  priority    String                        // Prioridade: 'high', 'medium', 'low'
  status      String                        // Status: 'pending', 'in_progress', 'completed'
  requestedBy String                        // ID do usu√°rio que fez a solicita√ß√£o
  requestedAt DateTime                      // Data/hora da solicita√ß√£o
  department  String                        // Departamento onde est√° o equipamento
  updatedAt   DateTime @updatedAt           // Data da √∫ltima atualiza√ß√£o
  
  // üîß CAMPOS ESPEC√çFICOS PARA T√âCNICOS
  assignedTo  String?  // ID do t√©cnico respons√°vel (opcional)
  notes       String?  // Observa√ß√µes do t√©cnico durante o atendimento
  solution    String?  // Descri√ß√£o da solu√ß√£o aplicada
  completedAt DateTime? // Data/hora de conclus√£o do servi√ßo

  // üîó RELACIONAMENTOS
  // Usu√°rio que criou a solicita√ß√£o
  user        User     @relation(fields: [requestedBy], references: [id])
  
  // T√©cnico respons√°vel pela manuten√ß√£o (opcional)
  assignedUser User?   @relation("AssignedMaintenance", fields: [assignedTo], references: [id])

  @@map("maintenance_requests") // Nome da tabela no banco
}

// üíª MODELO DE PRODUTOS
// Cat√°logo completo de produtos dispon√≠veis para venda
model Product {
  id          String    @id @default(uuid()) // ID √∫nico do produto
  name        String                         // Nome comercial do produto
  category    String                         // Categoria: 'CPU', 'CPU_Servidor', 'Placa de V√≠deo', etc.
  subcategory String?                        // Subcategoria: 'Gaming', 'Office', 'Server', etc.
  brand       String                         // Marca do produto (Intel, AMD, NVIDIA, etc.)
  price       Float                          // Pre√ßo de venda ao cliente
  cost        Float                          // Custo de aquisi√ß√£o/produ√ß√£o
  description String?                        // Descri√ß√£o detalhada do produto
  
  // üìä ESPECIFICA√á√ïES T√âCNICAS
  // Armazenadas em formato JSON para flexibilidade
  // Exemplo para CPU: { cores: 24, threads: 32, baseClock: "3.0 GHz", socket: "LGA1700" }
  specifications Json?
  
  // üì¶ CONTROLE DE ESTOQUE
  stock       Int       @default(0)          // Quantidade em estoque
  isActive    Boolean   @default(true)       // Produto ativo/inativo no cat√°logo
  
  // üìÖ TIMESTAMPS
  createdAt   DateTime  @default(now())      // Data de cria√ß√£o do produto
  updatedAt   DateTime  @updatedAt           // Data da √∫ltima atualiza√ß√£o
  
  // üîó RELACIONAMENTOS
  // Itens de pedidos que incluem este produto
  orderItems  OrderItem[]

  @@map("products") // Nome da tabela no banco
}

// üìã MODELO DE PEDIDOS
// Representa uma venda/pedido completo com informa√ß√µes do cliente
model Order {
  id          String      @id @default(uuid()) // ID √∫nico do pedido
  orderNumber String      @unique              // N√∫mero do pedido (ex: ORD-2024-001)
  
  // üë§ INFORMA√á√ïES DO CLIENTE
  customerName String                          // Nome completo do cliente
  customerEmail String?                        // Email do cliente (opcional)
  customerPhone String?                        // Telefone do cliente (opcional)
  
  // üìä STATUS E CONTROLE
  status      String                           // Status: 'pending', 'processing', 'testing', 'ready', 'delivered', 'cancelled'
  
  // üí∞ C√ÅLCULOS FINANCEIROS
  totalAmount Float                            // Valor total do pedido (pre√ßo de venda)
  totalCost   Float                            // Custo total dos produtos
  profitAmount Float                           // Lucro do pedido (totalAmount - totalCost)
  
  // üë®‚Äçüíº CONTROLE ADMINISTRATIVO
  createdBy   String                           // ID do usu√°rio que criou o pedido
  
  // üìÖ TIMESTAMPS
  createdAt   DateTime    @default(now())      // Data de cria√ß√£o do pedido
  updatedAt   DateTime    @updatedAt           // Data da √∫ltima atualiza√ß√£o
  deliveredAt DateTime?                        // Data de entrega (quando aplic√°vel)
  
  // üîó RELACIONAMENTOS
  // Usu√°rio que criou o pedido
  user        User        @relation(fields: [createdBy], references: [id])
  
  // Itens inclu√≠dos no pedido
  items       OrderItem[]

  @@map("orders") // Nome da tabela no banco
}

// üì¶ MODELO DE ITENS DO PEDIDO
// Representa cada produto espec√≠fico dentro de um pedido
model OrderItem {
  id        String  @id @default(uuid()) // ID √∫nico do item
  orderId   String                       // ID do pedido pai
  productId String                       // ID do produto
  
  // üìä QUANTIDADES E PRE√áOS
  quantity  Int                          // Quantidade do produto
  unitPrice Float                        // Pre√ßo unit√°rio de venda
  unitCost  Float                        // Custo unit√°rio do produto
  subtotal  Float                        // Pre√ßo total do item (quantity * unitPrice)
  profit    Float                        // Lucro do item (subtotal - (quantity * unitCost))
  
  // üîó RELACIONAMENTOS
  // Pedido ao qual este item pertence
  // onDelete: Cascade = quando o pedido for deletado, os itens tamb√©m s√£o
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Produto referenciado neste item
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items") // Nome da tabela no banco
}

// üìä MODELO DE RELAT√ìRIOS DE QUALIDADE
// Sistema de controle de qualidade com relat√≥rios e m√©tricas
model QualityReport {
  id          String   @id @default(uuid()) // ID √∫nico do relat√≥rio
  title       String                        // T√≠tulo do relat√≥rio
  type        String                        // Tipo: 'hardware', 'software', 'integration'
  description String                        // Descri√ß√£o detalhada do problema/observa√ß√£o
  category    String                        // Categoria para classifica√ß√£o
  status      String                        // Status: 'pending', 'in_progress', 'resolved'
  
  // üìù DETALHES E RESOLU√á√ÉO
  notes       String?                       // Observa√ß√µes adicionais
  resolution  String?                       // Descri√ß√£o da resolu√ß√£o aplicada
  
  // üë®‚Äçüíº CONTROLE ADMINISTRATIVO
  reportedBy  String                        // ID do usu√°rio que criou o relat√≥rio
  
  // üìÖ TIMESTAMPS
  createdAt   DateTime @default(now())      // Data de cria√ß√£o do relat√≥rio
  updatedAt   DateTime @updatedAt           // Data da √∫ltima atualiza√ß√£o
  expiresAt   DateTime?                     // Data de expira√ß√£o para auto-dele√ß√£o (opcional)
  
  // üîó RELACIONAMENTOS
  // Usu√°rio que criou o relat√≥rio
  user        User     @relation(fields: [reportedBy], references: [id])

  @@map("quality_reports") // Nome da tabela no banco
} 