import express, { Request, Response, NextFunction } from 'express';
import { PrismaClient } from '@prisma/client';
import { authMiddleware } from '../middleware/auth';

const router = express.Router();
const prisma = new PrismaClient();

// Middleware de valida√ß√£o para solicita√ß√µes de manuten√ß√£o
const validateMaintenanceRequest = (req: Request, res: Response, next: NextFunction) => {
  const { equipment, description, priority, department } = req.body;

  if (!equipment || !description || !priority || !department) {
    return res.status(400).json({
      message: 'Todos os campos s√£o obrigat√≥rios: equipment, description, priority, department'
    });
  }

  const validPriorities = ['Alta', 'M√©dia', 'Baixa'];
  if (!validPriorities.includes(priority)) {
    return res.status(400).json({
      message: 'Prioridade inv√°lida. Use: Alta, M√©dia ou Baixa'
    });
  }

  const validDepartments = ['Montagem Substrato', 'Bonding', 'Encapsulamento', 'Testes', 'Embalagem', 'Produ√ß√£o', 'Usinagem', 'Estamparia', 'Montagem'];
  if (!validDepartments.includes(department)) {
    return res.status(400).json({
      message: 'Departamento inv√°lido. Use: Montagem Substrato, Bonding, Encapsulamento, Testes, Embalagem, Produ√ß√£o, Usinagem, Estamparia ou Montagem'
    });
  }

  next();
};

// Middleware de valida√ß√£o para status
const validateStatus = (req: Request, res: Response, next: NextFunction) => {
  const { status } = req.body;
  const validStatus = ['Pendente', 'Em Andamento', 'Agendada', 'Conclu√≠da'];

  if (!status || !validStatus.includes(status)) {
    return res.status(400).json({
      message: 'Status inv√°lido. Use: Pendente, Em Andamento, Agendada ou Conclu√≠da'
    });
  }

  next();
};

// üìã ROTAS PARA FUNCION√ÅRIOS (CRIAR SOLICITA√á√ïES)

// Criar uma nova solicita√ß√£o de manuten√ß√£o
router.post('/requests', authMiddleware, validateMaintenanceRequest, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { equipment, description, priority, department } = req.body;
    const userId = (req as any).user.userId;
    
    const maintenanceRequest = await prisma.maintenanceRequest.create({
      data: {
        equipment,
        description,
        priority,
        department,
        status: 'Pendente',
        requestedBy: userId,
        requestedAt: new Date()
      }
    });

    res.status(201).json(maintenanceRequest);
  } catch (error) {
    next(error);
  }
});

// ===============================================
// MOCK DATA ENDPOINTS (TEMPORARY - FOR DEVELOPMENT)
// ===============================================

// GET /api/maintenance/mock-requests - Dados mockados realistas
router.get('/mock-requests', (req: Request, res: Response) => {
    try {
        console.log('‚úÖ GET /api/maintenance/mock-requests - Buscando dados mockados');
        
        const mockRequests = [
            {
                id: 'MNT001',
                equipment: 'Torno CNC Mazak QT-15',
                description: 'Ru√≠do anormal no eixo principal durante opera√ß√£o. Necessita verifica√ß√£o dos rolamentos e lubrifica√ß√£o.',
                priority: 'Alta',
                department: 'Usinagem',
                status: 'Em Andamento',
                requestedBy: 'Carlos Operador',
                requestedByEmail: 'carlos.operador@mrp2cpu.com.br',
                requestedAt: '2024-12-16T08:30:00Z',
                assignedTo: 'Jo√£o T√©cnico',
                estimatedTime: '4 horas'
            },
            {
                id: 'MNT002',
                equipment: 'Prensa Hidr√°ulica Schuler 250T',
                description: 'Vazamento de √≥leo no sistema hidr√°ulico. Press√£o inst√°vel durante estampagem.',
                priority: 'Alta',
                department: 'Estamparia',
                status: 'Pendente',
                requestedBy: 'Maria Supervisora',
                requestedByEmail: 'maria.supervisora@mrp2cpu.com.br',
                requestedAt: '2024-12-16T09:15:00Z',
                estimatedTime: '6 horas'
            },
            {
                id: 'MNT003',
                equipment: 'Esteira Transportadora Linha 3',
                description: 'Motor da esteira apresenta sobrecarga. Verificar tens√£o da correia e alinhamento.',
                priority: 'M√©dia',
                department: 'Montagem',
                status: 'Agendada',
                requestedBy: 'Pedro Montador',
                requestedByEmail: 'pedro.montador@mrp2cpu.com.br',
                requestedAt: '2024-12-15T14:20:00Z',
                scheduledFor: '2024-12-17T07:00:00Z',
                assignedTo: 'Ricardo El√©trica',
                estimatedTime: '3 horas'
            },
            {
                id: 'MNT004',
                equipment: 'Compressor Atlas Copco GA22',
                description: 'Temperatura elevada e consumo excessivo de energia. Limpeza dos filtros necess√°ria.',
                priority: 'M√©dia',
                department: 'Produ√ß√£o',
                status: 'Conclu√≠da',
                requestedBy: 'Ana T√©cnica',
                requestedByEmail: 'ana.tecnica@mrp2cpu.com.br',
                requestedAt: '2024-12-14T10:45:00Z',
                completedAt: '2024-12-15T16:30:00Z',
                assignedTo: 'Bruno Mec√¢nico',
                solution: 'Filtros de ar substitu√≠dos e limpeza geral do sistema. Temperatura normalizada.',
                timeSpent: '2.5 horas'
            },
            {
                id: 'MNT005',
                equipment: 'Soldadora Rob√≥tica KUKA KR6',
                description: 'Falha no programa de soldagem. Rob√¥ para na posi√ß√£o 3 da sequ√™ncia.',
                priority: 'Alta',
                department: 'Montagem',
                status: 'Em Andamento',
                requestedBy: 'Lucas Programador',
                requestedByEmail: 'lucas.programador@mrp2cpu.com.br',
                requestedAt: '2024-12-16T11:00:00Z',
                assignedTo: 'Marcos Automa√ß√£o',
                estimatedTime: '5 horas'
            },
            {
                id: 'MNT006',
                equipment: 'Fresadora CNC Haas VF-2',
                description: 'Alarme de temperatura no spindle. Sistema de refrigera√ß√£o com vaz√£o reduzida.',
                priority: 'Baixa',
                department: 'Usinagem',
                status: 'Agendada',
                requestedBy: 'Roberto Operador',
                requestedByEmail: 'roberto.operador@mrp2cpu.com.br',
                requestedAt: '2024-12-15T16:45:00Z',
                scheduledFor: '2024-12-18T06:00:00Z',
                assignedTo: 'Jo√£o T√©cnico',
                estimatedTime: '4 horas'
            }
        ];
        
        res.json(mockRequests);
    } catch (error) {
        console.error('‚ùå Erro ao buscar dados mockados:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Listar solicita√ß√µes do usu√°rio logado
router.get('/requests', authMiddleware, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const userId = (req as any).user.userId;
    
    const maintenanceRequests = await prisma.maintenanceRequest.findMany({
      where: {
        requestedBy: userId
      },
      orderBy: {
        requestedAt: 'desc'
      }
    });

    res.json(maintenanceRequests);
  } catch (error) {
    next(error);
  }
});

// üîß ROTAS PARA EQUIPE DE MANUTEN√á√ÉO (GERENCIAR TODOS OS PEDIDOS)

// Listar TODOS os pedidos de manuten√ß√£o (para equipe de manuten√ß√£o)
router.get('/all-requests', authMiddleware, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { status, priority } = req.query;
    
    const filters: any = {};
    if (status) filters.status = status;
    if (priority) filters.priority = priority;

    const allRequests = await prisma.maintenanceRequest.findMany({
      where: filters,
      include: {
        user: {
          select: {
            name: true,
            email: true,
            role: true
          }
        }
      },
      orderBy: [
        { status: 'asc' }, // Pendentes primeiro
        { priority: 'desc' }, // Alta prioridade primeiro
        { requestedAt: 'desc' }
      ]
    });

    // Mapear para incluir nome do solicitante
    const requestsWithUserInfo = allRequests.map(request => ({
      ...request,
      requestedByName: request.user.name,
      requestedByEmail: request.user.email
    }));

    res.json(requestsWithUserInfo);
  } catch (error) {
    next(error);
  }
});

// Atribuir um pedido para a equipe de manuten√ß√£o
router.put('/requests/:id/assign', authMiddleware, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { assignedTo, notes } = req.body;

    const existingRequest = await prisma.maintenanceRequest.findUnique({
      where: { id }
    });

    if (!existingRequest) {
      return res.status(404).json({
        message: 'Solicita√ß√£o de manuten√ß√£o n√£o encontrada'
      });
    }

    const updatedRequest = await prisma.maintenanceRequest.update({
      where: { id },
      data: { 
        status: 'Em Andamento',
        // assignedTo, // Ser√° adicionado quando expandir o schema
        // notes // Ser√° adicionado quando expandir o schema
      }
    });

    res.json(updatedRequest);
  } catch (error) {
    next(error);
  }
});

// Atualizar status e adicionar observa√ß√µes
router.put('/requests/:id/update', authMiddleware, validateStatus, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { status, solution, notes } = req.body;

    const existingRequest = await prisma.maintenanceRequest.findUnique({
      where: { id }
    });

    if (!existingRequest) {
      return res.status(404).json({
        message: 'Solicita√ß√£o de manuten√ß√£o n√£o encontrada'
      });
    }

    // Se est√° sendo marcado como conclu√≠do, incluir data de conclus√£o
    const updateData: any = { status };
    
    if (status === 'Conclu√≠da') {
      // Adicionar solu√ß√£o na descri√ß√£o por enquanto (at√© expandir schema)
      updateData.description = existingRequest.description + 
        (solution ? `\n\n‚úÖ SOLU√á√ÉO: ${solution}` : '') +
        (notes ? `\nüìù OBSERVA√á√ïES: ${notes}` : '');
    }

    const updatedRequest = await prisma.maintenanceRequest.update({
      where: { id },
      data: updateData
    });

    res.json(updatedRequest);
  } catch (error) {
    next(error);
  }
});

// Obter estat√≠sticas para dashboard de manuten√ß√£o
router.get('/stats', authMiddleware, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const [
      totalRequests,
      pendingRequests,
      inProgressRequests,
      completedToday,
      highPriorityPending
    ] = await Promise.all([
      prisma.maintenanceRequest.count(),
      prisma.maintenanceRequest.count({ where: { status: 'Pendente' } }),
      prisma.maintenanceRequest.count({ where: { status: 'Em Andamento' } }),
      prisma.maintenanceRequest.count({
        where: {
          status: 'Conclu√≠da',
          updatedAt: {
            gte: new Date(new Date().setHours(0, 0, 0, 0))
          }
        }
      }),
      prisma.maintenanceRequest.count({
        where: {
          status: 'Pendente',
          priority: 'Alta'
        }
      })
    ]);

    res.json({
      total: totalRequests,
      pending: pendingRequests,
      inProgress: inProgressRequests,
      completedToday,
      highPriorityPending
    });
  } catch (error) {
    next(error);
  }
});

// Atualizar o status de uma solicita√ß√£o (rota original mantida para compatibilidade)
router.put('/requests/:id', validateStatus, async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const existingRequest = await prisma.maintenanceRequest.findUnique({
      where: { id }
    });

    if (!existingRequest) {
      return res.status(404).json({
        message: 'Solicita√ß√£o de manuten√ß√£o n√£o encontrada'
      });
    }

    const updatedRequest = await prisma.maintenanceRequest.update({
      where: { id },
      data: { status }
    });

    res.json(updatedRequest);
  } catch (error) {
    next(error);
  }
});

// üè≠ ROTAS PARA GEST√ÉO DE EQUIPAMENTOS (ADMIN)

// Listar equipamentos
router.get('/equipment', authMiddleware, async (req: Request, res: Response, next: NextFunction) => {
  try {
    // Dados mockados de equipamentos da f√°brica de CPUs
    const equipment = [
      {
        id: 1,
        name: 'Pick & Place Machine ASMPT SIPLACE',
        type: 'Montagem SMT',
        status: 'operational',
        lastMaintenance: '2024-12-15T08:00:00.000Z',
        nextMaintenance: '2025-01-15T08:00:00.000Z',
        location: 'Linha de Montagem Substrato',
        serialNumber: 'SIPLACE-001',
        manufacturer: 'ASMPT',
        model: 'SIPLACE SX4'
      },
      {
        id: 2,
        name: 'M√°quina de Wire Bonding ASM AB339',
        type: 'Wire Bonding',
        status: 'maintenance',
        lastMaintenance: '2024-12-20T10:00:00.000Z',
        nextMaintenance: '2025-01-20T10:00:00.000Z',
        location: 'Setor de Bonding',
        serialNumber: 'AB339-002',
        manufacturer: 'ASM',
        model: 'AB339'
      },
      {
        id: 3,
        name: 'Molding Press APIC Yamada YAP-300',
        type: 'Encapsulamento',
        status: 'operational',
        lastMaintenance: '2024-12-18T14:00:00.000Z',
        nextMaintenance: '2025-01-18T14:00:00.000Z',
        location: 'Setor de Encapsulamento',
        serialNumber: 'YAP300-003',
        manufacturer: 'APIC Yamada',
        model: 'YAP-300'
      },
      {
        id: 4,
        name: 'Sistema de Teste ATE Advantest T2000',
        type: 'Teste de CPUs',
        status: 'operational',
        lastMaintenance: '2024-12-19T16:00:00.000Z',
        nextMaintenance: '2025-01-19T16:00:00.000Z',
        location: 'Setor de Testes',
        serialNumber: 'T2000-004',
        manufacturer: 'Advantest',
        model: 'T2000'
      },
      {
        id: 5,
        name: 'Sistema de Vis√£o COGNEX In-Sight 9000',
        type: 'Inspe√ß√£o Visual',
        status: 'broken',
        lastMaintenance: '2024-12-17T12:00:00.000Z',
        nextMaintenance: '2024-12-22T12:00:00.000Z',
        location: 'Setor de Testes',
        serialNumber: 'IS9000-005',
        manufacturer: 'COGNEX',
        model: 'In-Sight 9000'
      }
    ];

    res.json({
      success: true,
      data: equipment
    });
  } catch (error) {
    next(error);
  }
});

// Listar registros de manuten√ß√£o
router.get('/records', authMiddleware, async (req: Request, res: Response, next: NextFunction) => {
  try {
    // Dados mockados de registros de manuten√ß√£o
    const records = [
      {
        id: 1,
        equipmentId: 1,
        equipmentName: 'Pick & Place Machine ASMPT SIPLACE',
        type: 'preventive',
        description: 'Manuten√ß√£o preventiva mensal - limpeza e calibra√ß√£o',
        date: '2024-12-15T08:00:00.000Z',
        technician: 'Jo√£o Paulo Santos',
        cost: 850.00,
        status: 'completed',
        priority: 'medium',
        estimatedDuration: 4,
        completedAt: '2024-12-15T12:00:00.000Z'
      },
      {
        id: 2,
        equipmentId: 2,
        equipmentName: 'M√°quina de Wire Bonding ASM AB339',
        type: 'corrective',
        description: 'Corre√ß√£o de precis√£o do fio de ouro - calibra√ß√£o urgente',
        date: '2024-12-20T10:00:00.000Z',
        technician: 'Jo√£o Paulo Santos',
        cost: 1200.00,
        status: 'in_progress',
        priority: 'high',
        estimatedDuration: 6
      },
      {
        id: 3,
        equipmentId: 3,
        equipmentName: 'Molding Press APIC Yamada YAP-300',
        type: 'preventive',
        description: 'Verifica√ß√£o do sistema de aquecimento e press√£o',
        date: '2024-12-18T14:00:00.000Z',
        technician: 'Jo√£o Paulo Santos',
        cost: 650.00,
        status: 'completed',
        priority: 'medium',
        estimatedDuration: 3,
        completedAt: '2024-12-18T17:00:00.000Z'
      },
      {
        id: 4,
        equipmentId: 4,
        equipmentName: 'Sistema de Teste ATE Advantest T2000',
        type: 'corrective',
        description: 'Falhas intermitentes no canal 3 - manuten√ß√£o preventiva',
        date: '2024-12-19T16:00:00.000Z',
        technician: 'Jo√£o Paulo Santos',
        cost: 2100.00,
        status: 'scheduled',
        priority: 'high',
        estimatedDuration: 8
      },
      {
        id: 5,
        equipmentId: 5,
        equipmentName: 'Sistema de Vis√£o COGNEX In-Sight 9000',
        type: 'corrective',
        description: 'C√¢meras desalinhadas - recalibra√ß√£o necess√°ria',
        date: '2024-12-17T12:00:00.000Z',
        technician: 'Jo√£o Paulo Santos',
        cost: 950.00,
        status: 'scheduled',
        priority: 'high',
        estimatedDuration: 5
      }
    ];

    res.json({
      success: true,
      data: records
    });
  } catch (error) {
    next(error);
  }
});

// Obter m√©tricas de equipamentos
router.get('/metrics', authMiddleware, async (req: Request, res: Response, next: NextFunction) => {
  try {
    // Calcular m√©tricas baseadas nos dados mockados
    const metrics = {
      totalEquipment: 5,
      operationalEquipment: 3,
      maintenanceEquipment: 1,
      brokenEquipment: 1,
      totalMaintenanceRecords: 5,
      scheduledMaintenance: 2,
      inProgressMaintenance: 1,
      completedMaintenance: 2,
      totalMaintenanceCosts: 5750.00,
      averageMaintenanceCost: 1150.00,
      equipmentUptime: 85.5
    };

    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    next(error);
  }
});

// Middleware de erro espec√≠fico para erros do Prisma
router.use((error: any, req: Request, res: Response, next: NextFunction) => {
  if (error.code === 'P2002') {
    return res.status(400).json({
      message: 'Erro de restri√ß√£o √∫nica no banco de dados'
    });
  }
  if (error.code === 'P2025') {
    return res.status(404).json({
      message: 'Registro n√£o encontrado'
    });
  }
  next(error);
});

export default router; 